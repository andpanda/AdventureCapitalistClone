{"code":"import { __extends } from \"tslib\";\r\nimport 'phaser';\r\nimport { StringFormatUtils } from '../com.andre.utils/StringFormatUtils';\r\nimport { PlayerData } from '../com.andre.data/PlayerData';\r\nimport { GameData } from '../com.andre.system/GameData';\r\nvar Investment = /** @class */ (function (_super) {\r\n    __extends(Investment, _super);\r\n    function Investment(scene, id, x, y, iData) {\r\n        var _this = _super.call(this, scene, 'sprite') || this;\r\n        _this.iData = iData;\r\n        //this.investmentId = id;\r\n        if (_this.OwnInvestment()) {\r\n            _this.DrawInvestment(scene, id, x, y);\r\n        }\r\n        else {\r\n            _this.frameBg = scene.add.image(x + 122, y, 'inactive_investment');\r\n            _this.frameBg.scale = 0.8;\r\n            var t1_1 = scene.add.text(_this.frameBg.x, _this.frameBg.y - 14, iData.investmentName).setOrigin(0.5, 0.5);\r\n            var t2_1 = scene.add.text(_this.frameBg.x, _this.frameBg.y + 14, StringFormatUtils.FormatMoney(iData.basePrice)).setOrigin(0.5, 0.5);\r\n            _this.frameBg.setInteractive({ useHandCursor: true })\r\n                .on('pointerdown', function () {\r\n                if (_this.CanPurchase()) {\r\n                    _this.DrawInvestment(scene, id, x, y);\r\n                    _this.OnPurchase(1);\r\n                    _this.frameBg.destroy();\r\n                    t1_1.destroy();\r\n                    t2_1.destroy();\r\n                }\r\n            });\r\n        }\r\n        return _this;\r\n    }\r\n    Investment.prototype.OwnInvestment = function () {\r\n        return this.iData.own > 0;\r\n    };\r\n    Investment.prototype.GetCurrentCost = function () {\r\n        return this.iData.basePrice + (this.iData.basePrice * this.iData.costIncrement) * this.iData.own;\r\n    };\r\n    Investment.prototype.CanPurchase = function () {\r\n        return PlayerData.money >= this.GetCurrentCost();\r\n    };\r\n    Investment.prototype.OnPurchase = function (quant) {\r\n        PlayerData.money -= this.GetCurrentCost();\r\n        this.iData.own += quant;\r\n        this.ownLabel.text = '' + this.iData.own;\r\n        this.priceText.text = StringFormatUtils.FormatMoney(this.GetCurrentCost());\r\n        this.revenueText.text = StringFormatUtils.FormatMoney(this.GetTotalRevenue());\r\n        GameData.Save();\r\n    };\r\n    Investment.prototype.DrawInvestment = function (scene, id, x, y) {\r\n        var _this = this;\r\n        var bubble = scene.add.image(x, y, 'investment_bubble');\r\n        bubble.scale = 0.55;\r\n        var investmentFrame = scene.add.image(x, y, 'investment-frame');\r\n        investmentFrame.scale = 0.55;\r\n        var logo = scene.add.image(investmentFrame.x, investmentFrame.y - 8, 'investment_logo_' + id);\r\n        logo.scale = 0.6;\r\n        this.ownLabel = scene.add.text(investmentFrame.x, investmentFrame.y + 20, '' + this.iData.own);\r\n        this.ownLabel.setOrigin(0.5, 0);\r\n        investmentFrame.setInteractive({ useHandCursor: true })\r\n            .on('pointerdown', function () {\r\n            _this.RunInvestment();\r\n        });\r\n        var investmentProgressBg = scene.add.image(investmentFrame.x + 168, investmentFrame.y - 19, 'investment-progress-bg');\r\n        investmentProgressBg.scale = 0.75;\r\n        investmentProgressBg.setInteractive({ useHandCursor: true })\r\n            .on('pointerdown', function () {\r\n            _this.RunInvestment();\r\n        });\r\n        //bar used to display the investment progress\r\n        var greenBar = scene.add.image(investmentProgressBg.x - 116, investmentProgressBg.y, 'meter_green');\r\n        greenBar.scale = 0.65;\r\n        greenBar.setOrigin(1, 0.5);\r\n        greenBar.scaleX = 0;\r\n        this.revenueText = scene.add.text(investmentProgressBg.x + 24, investmentProgressBg.y - 7, StringFormatUtils.FormatMoney(this.GetTotalRevenue()));\r\n        this.revenueText.setOrigin(1, 0);\r\n        this.progressBar = greenBar;\r\n        var mask = investmentProgressBg.createBitmapMask();\r\n        greenBar.setMask(mask);\r\n        var investmentBtn = scene.add.image(investmentFrame.x + 130, investmentFrame.y + 28, 'invest_btn');\r\n        investmentBtn.scaleX = 0.7;\r\n        investmentBtn.scaleY = 0.5;\r\n        investmentBtn.setInteractive({ useHandCursor: true })\r\n            // .on('pointerover', () => console.log('oi'))\r\n            // .on('pointerout', () => console.log('oi2'))\r\n            .on('pointerdown', function () {\r\n            investmentBtn.setTexture('invest_btn_pressed');\r\n            if (PlayerData.money >= _this.GetCurrentCost())\r\n                _this.OnPurchase(1);\r\n        })\r\n            .on('pointerup', function () { investmentBtn.setTexture('invest_btn'); });\r\n        var buyText = scene.add.text(investmentBtn.x - 63, investmentBtn.y - 20, 'Buy');\r\n        scene.add.text(buyText.x, buyText.y + 20, 'x1');\r\n        var bPrice = this.iData.basePrice;\r\n        this.priceText = scene.add.text(buyText.x + 130, buyText.y, StringFormatUtils.FormatMoney(this.GetCurrentCost()));\r\n        this.priceText.setOrigin(1, 0);\r\n        var timerBtn = scene.add.image(investmentBtn.x + 126, investmentBtn.y, 'invest_btn_disabled');\r\n        timerBtn.scaleX = 0.42;\r\n        timerBtn.scaleY = 0.5;\r\n        this.timerText = scene.add.text(timerBtn.x, timerBtn.y, '00:00:00');\r\n        this.timerText.setOrigin(0.5, 0.5);\r\n        if (this.iData.haveManager)\r\n            this.RunInvestment();\r\n    };\r\n    Investment.prototype.RunInvestment = function () {\r\n        if (this.iData.isRunning)\r\n            return;\r\n        this.iData.startTime = Date.now();\r\n        this.iData.endTime = this.iData.startTime + (this.iData.duration * 1000);\r\n        this.iData.isRunning = true;\r\n        GameData.Save();\r\n    };\r\n    Investment.prototype.GetTotalRevenue = function () {\r\n        return this.iData.revenue * this.iData.own;\r\n    };\r\n    Investment.prototype.update = function () {\r\n        if (!this.OwnInvestment()) {\r\n            this.frameBg.setTexture(this.CanPurchase() ? 'investment_purchase' : 'inactive_investment');\r\n        }\r\n        if (this.iData.isRunning) {\r\n            var timeleft = this.iData.endTime - Date.now();\r\n            this.timerText.text = new Date(timeleft).toISOString().slice(11, 19);\r\n            var d = this.iData.duration * 1000;\r\n            var l = ((timeleft - d) / d);\r\n            this.progressBar.scaleX = l;\r\n            if (timeleft <= 0) {\r\n                this.progressBar.scaleX = 0;\r\n                this.iData.isRunning = false;\r\n                this.timerText.text = '00:00:00';\r\n                PlayerData.money += this.iData.revenue * this.iData.own;\r\n                GameData.Save();\r\n                if (this.iData.haveManager)\r\n                    this.RunInvestment();\r\n            }\r\n        }\r\n    };\r\n    return Investment;\r\n}(Phaser.GameObjects.GameObject));\r\nexport { Investment };\r\n","references":["/Applications/Projects/AdventureCapitalistClone/node_modules/phaser/types/phaser.d.ts","/Applications/Projects/AdventureCapitalistClone/node_modules/phaser/types/phaser.d.ts","/Applications/Projects/AdventureCapitalistClone/src/com.andre.utils/StringFormatUtils.ts","/Applications/Projects/AdventureCapitalistClone/src/com.andre.system/GameData.ts"]}
